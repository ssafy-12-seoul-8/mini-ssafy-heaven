name: 배포 파이프라인

on:
  push:
    branches:
      - dev

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 설치
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'

      - name: Dev Env 생성
        run: |
          touch ./.env
          echo "${{ secrets.BACK_BUILD_ENV }}" > ./.env
          cat ./.env

      - name: Docker Compose
        run: docker compuse up -d

      - name: Gradle 캐싱
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      - name: Gradle 셋업
        uses: gradle/actions/setup-gradle@v3

      - name: 빌드 권한 부여
        run: chmod +x gradlew

      - name: 프로젝트 빌드
        run: ./gradlew build -x test

      - name: AWS Credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public
        env:
          AWS_DEFAULT_REGION: us-east-1
          AWS_REGION: us-east-1

      - name: Docker 이미지 빌드 후 배포
        id: build-docker
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REGISTRY_ALIAS: ${{ secrets.ecr-registry-alias }}
          REPOSITORY: ddudu-ecr
          IMAGE_TAG: ${{ github.sha }}
          PROFILE: dev
          FILE:
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG --build-arg PROFILE=$PROFILE .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
          echo "image=$REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: ECS Task Definition 생성
        id: render-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ secrets.dev-task-definition }}
          container-name: ${{ secrets.dev-ecs-container-name }}
          image: ${{ steps.build-docker.outputs.image }}

      - name: ECS Task 실행
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-definition.outputs.task-definition }}
          service: ${{ secrets.dev-ecs-service }}
          cluster: ${{ secrets.dev-ecs-cluster }}
          wait-for-service-stability: true